import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';
import 'dart:developer';
import 'dart:async';

class PlantDiseaseDetector extends StatefulWidget {
  const PlantDiseaseDetector({super.key});

  @override
  PlantDiseaseDetectorState createState() => PlantDiseaseDetectorState();
}

class PlantDiseaseDetectorState extends State<PlantDiseaseDetector> {
  File? _image;
  String _result = "‡§Ö‡§ú‡•Ç‡§® ‡§ï‡§æ‡§π‡•Ä ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§®‡§æ‡§π‡•Ä.";
  bool _isLoading = false;

  final ImagePicker _picker = ImagePicker();
  final PageController _pageController = PageController();
  Timer? _carouselTimer;
  int _currentPage = 0;
  final List<Map<String, dynamic>> _carouselItems = [
    {
      'image': 'assets/helthscan.jpg',
      'title': '‡§™‡•Ä‡§ï ‡§§‡§™‡§æ‡§∏‡§£‡•Ä',
      'subtitle': '‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§∞‡•ã‡§ó ‡§ì‡§≥‡§ñ‡§æ',
    },
    {
      'image': 'assets/treatment.png',
      'title': '‡§â‡§™‡§ö‡§æ‡§∞ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä',
      'subtitle': '‡§∞‡•ã‡§ó‡§æ‡§Ç‡§µ‡§∞‡•Ä‡§≤ ‡§â‡§™‡§æ‡§Ø‡§æ‡§Ç‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä',
    },
    {
      'image': 'assets/expert.png',
      'title': '‡§§‡§ú‡•ç‡§û ‡§∏‡§≤‡•ç‡§≤‡§æ',
      'subtitle': '‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡§ø‡§≥‡§µ‡§æ',
    },
  ];

  @override
  void initState() {
    super.initState();
    _startCarouselTimer();
  }

  @override
  void dispose() {
    _carouselTimer?.cancel();
    _pageController.dispose();
    super.dispose();
  }

  void _startCarouselTimer() {
    _carouselTimer = Timer.periodic(const Duration(seconds: 3), (timer) {
      if (_currentPage < _carouselItems.length - 1) {
        _currentPage++;
      } else {
        _currentPage = 0;
      }
      _pageController.animateToPage(
        _currentPage,
        duration: const Duration(milliseconds: 500),
        curve: Curves.easeInOut,
      );
    });
  }

  Future<void> _pickImage(ImageSource source) async {
    final pickedFile = await _picker.pickImage(source: source);
    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
        _isLoading = true;
        _result = "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ö‡§æ‡§≤‡•Ç ‡§Ü‡§π‡•á...";
      });
      await _uploadImage(_image!);
    }
  }

  Future<void> _uploadImage(File imageFile) async {
    const String apiKey = "WulQdNqzTs8Rv4dQAPCZ64ij9dkNqaySdhT8pUFiuoV3EEBIrC";
    final uri = Uri.parse("https://api.plant.id/v3/health_assessment");

    var request = http.MultipartRequest("POST", uri)
      ..headers["Api-Key"] = apiKey
      ..fields["health"] = "all"
      ..fields["symptoms"] = "true"
      ..files.add(await http.MultipartFile.fromPath("images", imageFile.path));

    try {
      var response = await request.send();
      log('API Response Status: ${response.statusCode}');

      if (response.statusCode == 201) {
        final responseData = await response.stream.bytesToString();
        final decodedData = json.decode(responseData);
        log('API Response Body: ${jsonEncode(decodedData)}');

        // Extracting Data
        bool isHealthy =
            decodedData["result"]?["is_healthy"]?["binary"] ?? false;
        double healthProbability =
            (decodedData["result"]?["is_healthy"]?["probability"] ?? 0.0) * 100;

        List<dynamic> diseaseList =
            decodedData["result"]?["disease"]?["suggestions"] ?? [];
        List<dynamic> symptomsList =
            decodedData["result"]?["symptom"]?["suggestions"] ?? [];

        // Processing Disease Information
        String diseaseInfo = diseaseList.isNotEmpty
            ? diseaseList.map((disease) {
                String name = disease["name"] ?? "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§";
                String probability =
                    ((disease["probability"] ?? 0.0) * 100).toStringAsFixed(2);

                // Get control information from local database
                var controlInfo = DiseaseControlHelper.getControlInfo(name);

                return """
üåø **‡§Ü‡§ú‡§æ‡§∞:** $name
üîπ **‡§∏‡§Ç‡§≠‡§æ‡§µ‡•ç‡§Ø‡§§‡§æ:** $probability%
üõ°Ô∏è **‡§®‡§ø‡§Ø‡§Ç‡§§‡•ç‡§∞‡§£ ‡§™‡§¶‡•ç‡§ß‡§§‡•Ä:** ${controlInfo['control_methods'] ?? '‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä'}
üåæ **‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡•Ä‡§ü‡§ï‡§®‡§æ‡§∂‡§ï‡•á:** ${controlInfo['pesticides'] ?? '‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä'}
""";
              }).join("\n\n")
            : "‚úÖ ‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä ‡§®‡§ø‡§∞‡•ã‡§ó‡•Ä ‡§Ü‡§π‡•á.";

        // Processing Symptoms
        String symptomsInfo = symptomsList.isNotEmpty
            ? symptomsList.map((symptom) {
                String name = symptom["name"] ?? "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§";
                String probability =
                    ((symptom["probability"] ?? 0.0) * 100).toStringAsFixed(2);
                return "‚ö†Ô∏è **‡§≤‡§ï‡•ç‡§∑‡§£:** $name ($probability%)";
              }).join("\n\n")
            : "‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§∏‡§æ‡§™‡§°‡§≤‡•Ä ‡§®‡§æ‡§π‡•Ä‡§§.";

        setState(() {
          _isLoading = false;
          _result = """
üå± **‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø:** ${isHealthy ? "‡§®‡§ø‡§∞‡•ã‡§ó‡•Ä ‚úÖ" : "‡§Ü‡§ú‡§æ‡§∞‡•Ä ‚ùå"}  
üíØ **‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ:** ${healthProbability.toStringAsFixed(2)}%

$diseaseInfo

$symptomsInfo
""";
        });
      } else {
        log('API Error Response: ${await response.stream.bytesToString()}');
        setState(() {
          _isLoading = false;
          _result = "‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä. ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.";
        });
      }
    } catch (e) {
      log('API Request Error: $e');
      setState(() {
        _isLoading = false;
        _result = "‡§§‡•ç‡§∞‡•Å‡§ü‡•Ä: $e";
      });
    }
  }

  void _showImageSourceDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§®‡§ø‡§µ‡§°‡§æ"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.camera_alt),
                title: const Text("‡§ï‡•Ö‡§Æ‡•á‡§∞‡§æ"),
                onTap: () {
                  Navigator.pop(context);
                  _pickImage(ImageSource.camera);
                },
              ),
              ListTile(
                leading: const Icon(Icons.image),
                title: const Text("‡§ó‡•Ö‡§≤‡§∞‡•Ä"),
                onTap: () {
                  Navigator.pop(context);
                  _pickImage(ImageSource.gallery);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "‡§µ‡§®‡§∏‡•ç‡§™‡§§‡•Ä ‡§Ü‡§ú‡§æ‡§∞ ‡§∂‡•ã‡§ß‡§ï",
          style: TextStyle(fontWeight: FontWeight.w600),
        ),
        centerTitle: true,
        backgroundColor: Colors.white,
        foregroundColor: Colors.green.shade700,
        elevation: 0,
      ),
      backgroundColor: Colors.grey.shade50,
      body: SingleChildScrollView(
        child: Column(
          children: [
            // Carousel
            Container(
              height: 180,
              margin: const EdgeInsets.symmetric(vertical: 16),
              child: Stack(
                children: [
                  PageView.builder(
                    controller: _pageController,
                    onPageChanged: (index) {
                      setState(() {
                        _currentPage = index;
                      });
                    },
                    itemCount: _carouselItems.length,
                    itemBuilder: (context, index) {
                      return Container(
                        margin: const EdgeInsets.symmetric(horizontal: 16),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [
                              Colors.green.shade100,
                              Colors.green.shade50,
                            ],
                          ),
                          borderRadius: BorderRadius.circular(20),
                          boxShadow: [
                            BoxShadow(
                              color: Colors.green.withOpacity(0.1),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Container(
                              padding: const EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                shape: BoxShape.circle,
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.green.withOpacity(0.1),
                                    blurRadius: 8,
                                    offset: const Offset(0, 4),
                                  ),
                                ],
                              ),
                              child: Icon(
                                index == 0
                                    ? Icons.camera_alt
                                    : index == 1
                                        ? Icons.healing
                                        : Icons.psychology,
                                size: 35,
                                color: Colors.green.shade700,
                              ),
                            ),
                            const SizedBox(height: 16),
                            Text(
                              _carouselItems[index]['title'],
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: Colors.black87,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              _carouselItems[index]['subtitle'],
                              style: TextStyle(
                                fontSize: 14,
                                color: Colors.grey.shade700,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      );
                    },
                  ),
                  // Carousel Indicators
                  Positioned(
                    bottom: 10,
                    left: 0,
                    right: 0,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: List.generate(
                        _carouselItems.length,
                        (index) => AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          margin: const EdgeInsets.symmetric(horizontal: 4),
                          width: _currentPage == index ? 16 : 8,
                          height: 8,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(4),
                            color: _currentPage == index
                                ? Colors.green.shade600
                                : Colors.grey.shade300,
                          ),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),

            // Main Content
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16),
              child: Column(
                children: [
                  // Image Upload Card
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      children: [
                        _image != null
                            ? Stack(
                                children: [
                                  ClipRRect(
                                    borderRadius: BorderRadius.circular(15),
                                    child: Image.file(
                                      _image!,
                                      height: 250,
                                      width: double.infinity,
                                      fit: BoxFit.cover,
                                    ),
                                  ),
                                  Positioned(
                                    top: 8,
                                    right: 8,
                                    child: GestureDetector(
                                      onTap: () {
                                        setState(() {
                                          _image = null;
                                          _result = "‡§Ö‡§ú‡•Ç‡§® ‡§ï‡§æ‡§π‡•Ä ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§®‡§æ‡§π‡•Ä.";
                                        });
                                      },
                                      child: Container(
                                        padding: const EdgeInsets.all(8),
                                        decoration: BoxDecoration(
                                          color: Colors.white,
                                          shape: BoxShape.circle,
                                          boxShadow: [
                                            BoxShadow(
                                              color:
                                                  Colors.black.withOpacity(0.1),
                                              blurRadius: 4,
                                            ),
                                          ],
                                        ),
                                        child:
                                            const Icon(Icons.close, size: 20),
                                      ),
                                    ),
                                  ),
                                ],
                              )
                            : Container(
                                height: 200,
                                decoration: BoxDecoration(
                                  color: Colors.grey.shade50,
                                  borderRadius: BorderRadius.circular(15),
                                  border: Border.all(
                                    color: Colors.grey.shade200,
                                    width: 2,
                                    style: BorderStyle.solid,
                                  ),
                                ),
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Icon(
                                      Icons.add_photo_alternate_outlined,
                                      size: 50,
                                      color: Colors.grey.shade400,
                                    ),
                                    const SizedBox(height: 12),
                                    Text(
                                      "‡§™‡•Ä‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§®‡§ø‡§µ‡§°‡§æ",
                                      style: TextStyle(
                                        color: Colors.grey.shade600,
                                        fontSize: 16,
                                        fontWeight: FontWeight.w500,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                        const SizedBox(height: 16),
                        ElevatedButton.icon(
                          onPressed: _showImageSourceDialog,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.green.shade500,
                            minimumSize: const Size(double.infinity, 50),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            elevation: 0,
                          ),
                          icon: const Icon(Icons.camera_alt),
                          label: const Text(
                            "‡§™‡•ç‡§∞‡§§‡§ø‡§Æ‡§æ ‡§®‡§ø‡§µ‡§°‡§æ",
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 20),

                  // Results Section
                  if (_isLoading)
                    Container(
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.05),
                            blurRadius: 10,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      ),
                      child: Column(
                        children: [
                          CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation<Color>(
                              Colors.green.shade500,
                            ),
                          ),
                          const SizedBox(height: 16),
                          const Text(
                            "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ö‡§æ‡§≤‡•Ç ‡§Ü‡§π‡•á...",
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    )
                  else if (_result != "‡§Ö‡§ú‡•Ç‡§® ‡§ï‡§æ‡§π‡•Ä ‡§®‡§ø‡§∑‡•ç‡§ï‡§∞‡•ç‡§∑ ‡§®‡§æ‡§π‡•Ä.")
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(20),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.05),
                            blurRadius: 10,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      ),
                      child: SelectableText(
                        _result,
                        style: const TextStyle(
                          fontSize: 16,
                          height: 1.5,
                        ),
                      ),
                    ),
                ],
              ),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}

class DiseaseControlHelper {
  static Map<String, Map<String, String>> diseaseDatabase = {
    "Fungi": {
      "control_methods":
          "‚Ä¢ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§≠‡§æ‡§ó ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§æ\n‚Ä¢ ‡§ö‡§æ‡§Ç‡§ó‡§≤‡•Ä ‡§π‡§µ‡§æ ‡§Ø‡•á‡§£‡•ç‡§Ø‡§æ‡§ú‡§æ‡§ó‡§æ ‡§†‡•á‡§µ‡§æ\n‚Ä¢ ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§´‡§Ç‡§ó‡§ø‡§∏‡§æ‡§Ø‡§° ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§ï‡§∞‡§æ",
      "pesticides": "‡§¨‡•ã‡§∞‡•ç‡§°‡•ã ‡§Æ‡§ø‡§∂‡•ç‡§∞‡§£, ‡§®‡•Ä‡§Æ ‡§§‡•á‡§≤, ‡§ï‡•â‡§™‡§∞ ‡§ë‡§ï‡•ç‡§∏‡§ø‡§ï‡•ç‡§≤‡•ã‡§∞‡§æ‡§á‡§°"
    },
    "rust": {
      "control_methods":
          "‚Ä¢ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§™‡§æ‡§®‡•á ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§æ\n‚Ä¢ ‡§ì‡§≤‡§æ‡§µ‡§æ ‡§ï‡§Æ‡•Ä ‡§†‡•á‡§µ‡§æ\n‚Ä¢ ‡§ó‡§Ç‡§ß‡§ï‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§∏‡•ç‡§™‡•ç‡§∞‡•á ‡§µ‡§æ‡§™‡§∞‡§æ",
      "pesticides": "‡§Æ‡•Ö‡§®‡•ç‡§ï‡•ã‡§ù‡•á‡§¨, ‡§™‡•ç‡§∞‡•ã‡§™‡§ø‡§ï‡•ã‡§®‡§æ‡§ù‡•ã‡§≤, ‡§ü‡•á‡§¨‡•Å‡§ï‡•ã‡§®‡§æ‡§ù‡•ã‡§≤"
    },
    "nutrient deficiency": {
      "control_methods":
          "‚Ä¢ ‡§Æ‡§æ‡§§‡•Ä‡§ö‡•Ä ‡§ö‡§æ‡§ö‡§£‡•Ä ‡§ï‡§∞‡§æ\n‚Ä¢ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§ñ‡§§ ‡§µ‡§æ‡§™‡§∞‡§æ\n‚Ä¢ ‡§ú‡•à‡§µ‡§ø‡§ï ‡§ñ‡§§ ‡§µ‡§æ‡§¢‡§µ‡§æ",
      "pesticides": "NPK ‡§ñ‡§§‡•á, ‡§Æ‡§æ‡§Ø‡§ï‡•ã‡§∞‡§æ‡§Ø‡§ù‡§æ, ‡§∏‡§Æ‡•Å‡§¶‡•ç‡§∞‡§∂‡•á‡§µ ‡§ñ‡§§"
    },
    "Bacteria": {
      "control_methods":
          "‚Ä¢ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§ø‡§§ ‡§ù‡§æ‡§°‡•á ‡§ï‡§æ‡§¢‡•Ç‡§® ‡§ü‡§æ‡§ï‡§æ\n‚Ä¢ ‡§∏‡•ç‡§ü‡§∞‡§≤‡§æ‡§á‡§ú‡•ç‡§° ‡§∏‡§æ‡§ß‡§®‡•á ‡§µ‡§æ‡§™‡§∞‡§æ\n‚Ä¢ ‡§§‡§æ‡§Ç‡§¨‡•ç‡§Ø‡§æ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ï‡•Ä‡§ü‡§ï‡§®‡§æ‡§∂‡§ï‡•á ‡§µ‡§æ‡§™‡§∞‡§æ",
      "pesticides": "‡§ï‡•â‡§™‡§∞ ‡§π‡§æ‡§Ø‡§°‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡§æ‡§á‡§°, ‡§¨‡•Ö‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§∏‡§æ‡§Ø‡§°, ‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§™‡•ç‡§ü‡•ã‡§Æ‡§æ‡§Ø‡§∏‡§ø‡§®"
    }
  };

  static Map<String, String> getControlInfo(String diseaseName) {
    return diseaseDatabase[diseaseName] ?? {};
  }
}
